package com.example.rxb;

import soot.MethodOrMethodContext;
import soot.SootMethod;
import soot.Unit;
import soot.jimple.toolkits.callgraph.Edge;

public class CFGGraph {

	private Vertex vertexList[]; // list of vertices
	private int adjMat[][]; // adjacency matrix
    int size;
	

	int i = 0;
	int j = 0;

	public Vertex[] getVertexList() {
		return vertexList;
	}

	public int[][] getAdjMat() {
		return adjMat;
	}

	public int getN() {
		return size;
	}

	 public CFGGraph(Vertex[] labelArray,Edge[] edges){
		    this.vertexList=labelArray;
		    this.size=labelArray.length;
		    adjMat=new int[size][size];
//		    System.out.println("矩阵大小："+size);
		    for(int i=0;i<size;i++){
		    	for(int j=0;j<size;j++){
		    	
		    		adjMat[i][j]=0;
		    
		    	}	
		    	}
		    for(Edge e:edges){
		    	int begin=findIndex(e.getSrc(),labelArray);
//		    	System.out.println("正在找的头："+e.getSrc());
//		    	System.out.println(begin);
		    	int end=findIndex(e.getTgt(),labelArray);
//		    	System.out.println("正在找的尾："+e.getTgt());
//		    	System.out.println(end);
//		    	System.out.println("头："+begin+" 尾："+end);
		    	adjMat[begin][end]=1;
		    }
		    	
		    }
	 public static int findIndex(MethodOrMethodContext label,Vertex[] labelArray){
		 for(int i=0;i<labelArray.length;i++){
			 if(label.equals(labelArray[i].label)){
				 return i;
			 }
		 }
		 return -1;
	 }

	private void addEdge(int start, int end) {// 有向图，添加边
		adjMat[start][end] = 1;

	}
	

	public MethodOrMethodContext displayVertex(int i) {
		return vertexList[i].getLabel();
	}

	public boolean displayVertexVisited(int i) {
		return vertexList[i].WasVisited();
	}
	public void print(){
		 for(int i=0;i<adjMat.length;i++){
			 int[] ii=adjMat[i];
			 System.out.println(vertexList[i].label+" ");
			 for(int j:ii){
				 System.out.printf("%-16d",j);
			 }
			 System.out.println();
		 }
	}

}

