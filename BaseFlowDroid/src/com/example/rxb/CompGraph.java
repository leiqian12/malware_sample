/**
 * 
 */
package com.example.rxb;


import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;


import soot.SootMethod;
import soot.Unit;
import soot.jimple.infoflow.solver.IInfoflowCFG;

/**
 * @author Administrator
 *
 */
public class CompGraph {
	public static IInfoflowCFG iCfg;
	static NewDirectedGraph newDG;
	static Collection<Unit> needDelete=new ArrayList<Unit>();
	static Collection<Unit> needAdd=new ArrayList<Unit>();
public static void compAndDeleteExtraEdge(){
	getDirectedGraph.getGraph();
	newDG = getDirectedGraph.newDG;
	iCfg = getDirectedGraph.iCfg;	
	for (Iterator<Unit> iter = newDG.iterator(); iter.hasNext();) {
		Unit unit = iter.next();
		
		SootMethod exist = null;
		Collection<SootMethod> colls = iCfg.getCalleesOfCallAt(unit);
		boolean judge = false;
		for (SootMethod sm : newDG.getAllHeads().keySet()) {
			for (SootMethod c : colls) {
				if (sm.equals(c)) {
					exist = c;
					judge = true;
					break;
				}
			}
		}
		if (judge) {
//			System.out.println("处理的："+unit);
//			System.out.println("其前驱"+newDG.getPredsOf(unit));
			List<Unit> preds=new ArrayList<Unit>(newDG.getPredsOf(unit));
//			System.out.println("前驱："+preds);
			List<Unit> succs=new ArrayList<Unit>(newDG.getSuccsOf(unit));
			List<Unit> enters=newDG.getAllHeads().get(exist);
			List<Unit> exits=newDG.getAllTails().get(exist);
			Unit call=new CALL("CALL Method_"+unit);
			newDG.unitToPreds.put(call, new ArrayList<Unit>());
			newDG.unitToSuccs.put(call, new ArrayList<Unit>());
			Unit return_from=new RETURN_FROM("RETURN From_"+unit);
			newDG.unitToPreds.put(return_from, new ArrayList<Unit>());
			newDG.unitToSuccs.put(return_from, new ArrayList<Unit>());
			
			for(Unit pred:preds){
			
//				if(!pred.equals(unit)){
//				System.out.println("执行1");
				newDG.getSuccsOf(pred).add(call);
				newDG.getPredsOf(call).add(pred);
			
				newDG.getSuccsOf(pred).remove(unit);
    			newDG.getPredsOf(unit).remove(pred);	
			}
			needAdd.add(call);
			for(Unit enter:enters){	
				newDG.getSuccsOf(call).add(enter);
				newDG.getPredsOf(enter).add(call);
			}
	
			
			for(Unit succ:succs){
//				if(!succ.equals(unit)){
//				System.out.println("执行2");
				newDG.getPredsOf(succ).add(return_from);
				newDG.getSuccsOf(return_from).add(succ);
				newDG.getPredsOf(succ).remove(unit);
				newDG.getSuccsOf(unit).remove(succ);
				}
			needAdd.add(return_from);
			for(Unit exit:exits){
				newDG.getPredsOf(return_from).add(exit);
				newDG.getSuccsOf(exit).add(return_from);
			}
			needDelete.add(unit);
				}
			
			
//		}
	}
	newDG.unitChain.removeAll(needDelete);
	newDG.unitChain.addAll(needAdd);
		// for(Iterator<Unit> it=newDG.unitChain.iterator();it.hasNext();){
		// Unit u=it.next();
		// System.out.println("节点："+u);
		// System.out.println("前驱："+newDG.getPredsOf(u));
		// }
}

	public static void main(final String[] args) {
		compAndDeleteExtraEdge();
	}
}
