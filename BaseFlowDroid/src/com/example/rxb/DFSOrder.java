package com.example.rxb;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;

import soot.Unit;

/**
 * 有向图的深度优先遍历实现 在深度遍历中，是否存在一条路径包含了图中所有的顶点??
 * 
 * @author psj
 *
 */
public class DFSOrder {

    /**
     * 从start顶点开始,对graph进行DFS遍历(非递归)
     * 
     * @param graph
     * @param start
     * @return DFS遍历顺序
     */
    public static LinkedList<Unit> dfs(NewDirectedGraph signalGraph,Unit start) {
    	Map<Unit, ArrayList<Unit>> graph=signalGraph.unitToSuccs;
    	assert graph.keySet().contains(start);// 假设 start 一定是图中的顶点
        LinkedList<Unit> paths = new LinkedList<Unit>();
        Map<Unit,Integer> visitedTimes=new HashMap<Unit,Integer>();
        HashSet<Unit> visited = new HashSet<Unit>(graph.size());// 用来判断某个顶点是否已经访问了
        LinkedList<Unit> stack = new LinkedList<Unit>();// 模拟递归遍历中的栈

        stack.push(start);
        paths.add(start);
        visited.add(start);

        while (!stack.isEmpty()) {
        	Unit next = null;// 下一个待遍历的顶点
            Unit currentVertex = stack.peek();// 当前正在遍历的顶点
            ArrayList<Unit> adjs = graph.get(currentVertex);// 获取当前顶点的邻接表
           if(!visitedTimes.containsKey(currentVertex))
           {
            visitedTimes.put(currentVertex, 1);
           }
           else{
        	   visitedTimes.replace(currentVertex, visitedTimes.get(currentVertex), visitedTimes.get(currentVertex)+1);
           }
            if (adjs != null) {         	
                for (Unit vertex : adjs) {
                
                    if (!visited.contains(vertex))// vertex 未被访问过
                    {
                        next = vertex;
                        break;
                    }
                    
                }
            }// end if
            if (next != null)// 当前顶点还有未被访问的邻接点
            {
                paths.add(next);// 将该邻接点添加到访问路径中
                stack.push(next);
                visited.add(next);
            } else {
                stack.pop();// 回退
            }
        }// end while
        return paths;
    }
    // 打印从某个顶点开始的深度优先遍历路径
    public static void printPath(ArrayList<Unit> paths,
            Map<Unit, ArrayList<Unit>> graph) {
        System.out.println("dfs path:");
        for (Unit v : paths) {
            System.out.print(v + " ");
        }
        System.out.println();
    }

    // 判断有向图中是否存在某顶点，从该顶点进行DFS遍历，能够遍历到图中所有的顶点
//    public static boolean containsAllNode(Map<Unit, ArrayList<Unit>> graph) {
//        boolean result = false;
//
//        ArrayList<Unit> paths = null;
//        Set<Unit> vertexs = graph.keySet();
//        // 从图中的每一个顶点开始DFS遍历
//        for (Unit v : vertexs) {
//            paths = dfs(graph, v);
//
//            if (paths.size() == graph.size())// 从 顶点 v 遍历 能够遍历完图中所有的顶点.
//            {
////                System.out.println("从顶点: " + v + " 开始DFS遍历能够遍历完所有的顶点,路径如下:");
//                printPath(paths, graph);
//                result = true;
//                break;
//            }
//        }
//        return result;
//    }

    // hapjin test
//    public static void main(String[] args) {
        // String[] words = {"me","cba","agm","abc","eqm","cde"};

//        String[] words = { "abc", "cde", "efg", "che" };
//        Map<String, ArrayList<String>> graph = buildGraph(words);
//        System.out.println(containsAllNode(graph));
//    }
}